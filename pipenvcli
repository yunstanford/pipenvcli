#!/usr/bin/env python
import os
import sys
import logging
import subprocess
import tarfile
import tempfile
import shutil
import io

from optparse import OptionParser, BadOptionError, AmbiguousOptionError

try:
    from urllib2 import urlopen as urlopen
except:
    from urllib.request import urlopen as urlopen


ROOT = os.path.dirname(os.path.realpath(__file__))
VIRTUALENV_DIR = os.path.join(ROOT, ".sandbox")
PIPENV_SANDBOX = os.path.join(ROOT, ".sandbox", "bin")
PIPENV_BIN =  os.path.join(VIRTUALENV_DIR, "bin")
PIPENV_ENTRY = os.path.join(PIPENV_SANDBOX, "pipenv")
SET_ENV_SCRIPT = os.path.join(ROOT, "set_env.sh")
SCRIPT_URLS = [
    "https://raw.githubusercontent.com/yunstanford/pipenv_demo/master/set_env.sh"
]


# virtualenv
VENV_URL = "https://pypi.python.org/packages/source/v/virtualenv/virtualenv-{major}.{minor}.{rev}.tar.gz"
VENV_MAJOR = 15
VENV_MINOR = 1
VENV_REV = 0
FALLBACK_URL = "https://github.com/pypa/virtualenv/archive/{major}.{minor}.{rev}.tar.gz"


LOGGER = logging.getLogger(__name__)


class PassThroughOptionParser(OptionParser):
    """
    An unknown option pass-through implementation of OptionParser.
    When unknown arguments are encountered, bundle with largs and try again,
    until rargs is depleted.
    sys.exit(status) will still be called if a known argument is passed
    incorrectly (e.g. missing arguments or bad argument types, etc.)
    credit to justind: http://stackoverflow.com/questions/1885161/how-can-i-get-optparses-optionparser-to-ignore-invalid-options
    """
    def _process_args(self, largs, rargs, values):
        while rargs:
            try:
                OptionParser._process_args(self, largs, rargs, values)
            except (BadOptionError, AmbiguousOptionError) as e:
                largs.append(e.opt_str)

    def _process_short_opts(self, rargs, values):
        arg = rargs.pop(0)
        stop = False
        i = 1
        for ch in arg[1:]:
            opt = "-" + ch
            option = self._short_opt.get(opt)
            i += 1                      # we have consumed a character

            if not option:
                raise BadOptionError(arg)
            if option.takes_value():
                # Any characters left in arg?  Pretend they're the
                # next arg, and stop consuming characters of arg.
                if i < len(arg):
                    rargs.insert(0, arg[i:])
                    stop = True

                nargs = option.nargs
                if len(rargs) < nargs:
                    if nargs == 1:
                        self.error(_("%s option requires an argument") % opt)
                    else:
                        self.error(_("%s option requires %d arguments")
                                   % (opt, nargs))
                elif nargs == 1:
                    value = rargs.pop(0)
                else:
                    value = tuple(rargs[0:nargs])
                    del rargs[0:nargs]

            else:                       # option doesn't take a value
                value = None

            option.process(opt, value, values, self)

            if stop:
                break


parser = PassThroughOptionParser(add_help_option=False,)


def _pipenv_exists():
    if not os.path.exists(PIPENV_SANDBOX):
        return False
    if not os.path.isfile(PIPENV_ENTRY):
        return False
    return True


def _run_pipenv(args):
    if not _pipenv_exists():
        LOGGER.info("pipenv doesn't exist, let's set up env first..")
        set_env()

    # activate pipenv virtualenv
    _activate_virtualenv(VIRTUALENV_DIR)

    # set env var properly
    os.environ["PATH"] = "{}:{}".format(PIPENV_BIN, os.environ.get("PATH"))
    os.environ["PIPENV_VENV_IN_PROJECT"] = "1"

    command = [PIPENV_ENTRY]
    command.extend(args)
    subprocess.call(command)


def set_env():
    _install_virtualenv(VIRTUALENV_DIR)
    # activate pipenv virtualenv
    _activate_virtualenv(VIRTUALENV_DIR)

    # _download_scripts()
    # _run_scripts()

    os.chdir(ROOT)
    subprocess.call([
        os.path.join(VIRTUALENV_DIR, "bin", "pip"),
        "install",
        "pew"
    ])
    subprocess.call([
        os.path.join(VIRTUALENV_DIR, "bin", "pip"),
        "install",
        "pipenv"
    ])



def _run_scripts():
    os.chdir(ROOT)
    for url in SCRIPT_URLS:
        filename = url.split("/")[-1]
        LOGGER.info("Executing {0} script from ".format(filename) + url)
        subprocess.call([
            "sh", os.path.join(ROOT, "bin", filename)
        ])


def _download_scripts():
    for url in SCRIPT_URLS:
        _download(url, 'bin')


def _download(url, destination):
    cache_path = "{0}/{1}".format(ROOT, destination)
    filename = url.split("/")[-1]
    LOGGER.info("Downloading {0} script from ".format(filename) + url)
    LOGGER.info("loading script...")
    body = urlopen(url).read()
    LOGGER.info("caching script...")
    _store_cache(body, cache_path, filename)
    _chmod(cache_path, filename)
    LOGGER.info("=== Done! ===")


def _store_cache(body, cache_path, filename):
    if not os.path.exists(cache_path):
        os.makedirs(cache_path)
    cached_script = os.path.join(cache_path, filename)
    with open(cached_script, "wb+") as fh:
        fh.write(body)


def _chmod(path, filename):
    subprocess.call([
        "chmod", "+x", "{0}/{1}".format(path, filename)
    ])
    LOGGER.info("Change {0}/{1} permision mode to be 755".format(path, filename))


def _install_virtualenv(install_dir):
    if _is_virtualenv(install_dir):
        return

    LOGGER.info("installing virtualenv...")

    temp_dir = tempfile.mkdtemp()
    try:
        _download_virtualenv(temp_dir)
        virtualenv_dir = os.path.join(temp_dir, "virtualenv-{major}.{minor}.{rev}".format(
            major=VENV_MAJOR, minor=VENV_MINOR, rev=VENV_REV
        ))
        virtualenv_executable = os.path.join(virtualenv_dir, 'virtualenv.py')
        os.chdir(virtualenv_dir)  # virtualenv only works in the cwd it is installed in
        subprocess.call([sys.executable, virtualenv_executable,
                         '--no-site-packages',
                         '--always-copy',
                         install_dir])
        site_py_file = _get_site_file_path(install_dir)
        _inject_to_site_py(site_py_file)
    finally:
        shutil.rmtree(temp_dir)


def _get_site_file_path(venv_directory):
    executable = os.path.join(venv_directory, 'bin', 'python')
    return subprocess.Popen(
        [executable, "-c", "import site; print(site.__file__)"],
        stdout=subprocess.PIPE
    # we strip the last character 'c' in case it's a .pyc file
    # want the .py
    ).communicate()[0].decode('utf-8').rstrip('c\n')


def _inject_to_site_py(site_py_file):
    """
    we inject modifications to the site.py
    """
    with open(site_py_file, 'a') as fh:
        fh.write("""
# reshuffling the paths to ensure that distributions in the sandbox
# always come first
paths_to_append = [p for p in sys.path if p.startswith(sys.real_prefix)]
sys.path = [p for p in sys.path if not p.startswith(sys.real_prefix)]
sys.path += paths_to_append
        """.strip())


def _download_virtualenv(target_dir=None):
    target_dir = target_dir or os.path.abspath(os.curdir)
    try:
        venv_url = VENV_URL.format(
            major=VENV_MAJOR, minor=VENV_MINOR, rev=VENV_REV
        )
        _extract_tar(venv_url, target_dir)
    except:
        LOGGER.info("url {} failed. Attempting fallback...".format(venv_url))
        venv_url = FALLBACK_URL.format(
            major=VENV_MAJOR, minor=VENV_MINOR, rev=VENV_REV
        )
        _extract_tar(venv_url, target_dir)


def _extract_tar(url, target_dir):
    """ Return a bytesio object with a download bar """
    LOGGER.info("Downloading url: {0}".format(url))
    fileobj = io.BytesIO(urlopen(url).read())
    tf = tarfile.TarFile.open(fileobj=fileobj)
    LOGGER.info("extracting to {0}...".format(target_dir))
    tf.extractall(target_dir)


def _activate_virtualenv(install_dir):
    # if the pyvenv launcher environment variable is set, it causes the install directory
    # to be that directory.
    # we want the virtualenv directory to be the one we just created, so we remove
    # this variable
    if '__PYVENV_LAUNCHER__' in os.environ:
        del os.environ['__PYVENV_LAUNCHER__']

    # We don't need to do this... yet.
    # venv_activate_file = os.path.join(install_dir, 'bin', 'activate_this.py')
    # _execute_file(venv_activate_file)


VIRTUALENV_FILES = {
    'activate file': os.path.join('bin', 'activate')
}


def _is_virtualenv(path):
    """ validate if the path is already a virtualenv """
    for name, venv_path in VIRTUALENV_FILES.items():
        target_path = os.path.join(path, venv_path)
        if not os.path.exists(target_path):
            return False
    return True


def _execute_file(path):
    with open(path) as f:
        code = compile(f.read(), path, 'exec')
        exec(code, dict(__file__=path), {})


def main(argv):
    options, args = parser.parse_args(argv)
    sys.exit(_run_pipenv(args))


def _create_stdout_logger():
    """ create a logger to stdout """
    log = logging.getLogger(__name__)
    out_hdlr = logging.StreamHandler(sys.stdout)
    out_hdlr.setFormatter(logging.Formatter('[%(asctime)s] %(message)s', "%H:%M:%S"))
    out_hdlr.setLevel(logging.INFO)
    log.addHandler(out_hdlr)
    log.setLevel(logging.INFO)


if __name__ == "__main__":
    _create_stdout_logger()
    main(sys.argv[1:])
